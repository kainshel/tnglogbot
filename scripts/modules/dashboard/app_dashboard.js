// app_dashboard.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeDashboard();
    setupEventListeners();
	 setupModalHandlers(); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    loadMotivationalQuote();
});

// –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram
document.addEventListener('telegramReady', function(event) {
    const telegramApp = event.detail;
    updateUserInterface(telegramApp);
    loadUserData();
    checkAchievements();
});

function initializeDashboard() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    showLoadingSkeletons();
    initializeGreeting();
    setupNotificationSystem();
}

function updateUserInterface(telegramApp) {
    if (telegramApp && telegramApp.user) {
        const userName = `${telegramApp.user.first_name || ''} ${telegramApp.user.last_name || ''}`.trim();
        document.getElementById('user-name').textContent = userName || '–°–ø–æ—Ä—Ç—Å–º–µ–Ω';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if (telegramApp.user.photo_url) {
            updateUserAvatar(telegramApp.user.photo_url);
        }
    }
}

function updateUserAvatar(photoUrl) {
    const avatarElement = document.getElementById('user-avatar');
    const placeholder = document.getElementById('avatar-placeholder');
    
    if (photoUrl) {
        placeholder.style.display = 'none';
        avatarElement.style.backgroundImage = `url(${photoUrl})`;
        avatarElement.classList.add('has-avatar');
    }
}

function initializeGreeting() {
    const hour = new Date().getHours();
    const greetingEmoji = document.getElementById('greeting-emoji');
    
    if (hour < 12) {
        greetingEmoji.textContent = 'üåÖ';
    } else if (hour < 18) {
        greetingEmoji.textContent = '‚òÄÔ∏è';
    } else {
        greetingEmoji.textContent = 'üåô';
    }
}

function loadUserData() {
    loadUserStats();
    loadRecentWorkouts();
    loadFavoriteExercises();
    loadUpcomingWorkouts();
    loadAchievementsPreview();
}

function loadUserStats() {
    try {
        const stats = JSON.parse(localStorage.getItem('userStats')) || calculateUserStats();
        updateStatsUI(stats);
        updateProgressBars(stats);
        updateTrendIndicators(stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showEmptyStats();
    }
}

function calculateUserStats() {
    try {
        const workoutHistory = JSON.parse(localStorage.getItem('workoutHistory')) || [];
        const now = new Date();
        const startOfWeek = new Date(now);
        startOfWeek.setDate(now.getDate() - now.getDay());
        startOfWeek.setHours(0, 0, 0, 0);
        
        // –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
        const weekWorkouts = workoutHistory.filter(workout => {
            if (!workout || !workout.date) return false;
            
            let workoutDate;
            if (typeof workout.date === 'string') {
                workoutDate = new Date(workout.date);
            } else if (workout.date instanceof Date) {
                workoutDate = workout.date;
            } else {
                return false;
            }
            
            return workoutDate >= startOfWeek;
        }).length;
        
        // –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        const allExercises = new Set();
        let totalSets = 0;
        
        workoutHistory.forEach(workout => {
            if (workout.exercises && Array.isArray(workout.exercises)) {
                workout.exercises.forEach(exercise => {
                    if (exercise && exercise.id) {
                        allExercises.add(exercise.id);
                        totalSets += exercise.sets || 0;
                    }
                });
            }
        });
        
        // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–¥–µ–ª–∏
        const weekProgress = Math.min(weekWorkouts / 7 * 100, 100);
        
        const stats = {
            totalWorkouts: workoutHistory.length,
            weekWorkouts: weekWorkouts,
            totalExercises: allExercises.size,
            totalSets: totalSets,
            weekProgress: weekProgress,
            lastWorkout: workoutHistory.length > 0 ? formatDate(workoutHistory[0].date) : '‚Äî',
            lastWorkoutDate: workoutHistory.length > 0 ? new Date(workoutHistory[0].date) : null
        };
        
        localStorage.setItem('userStats', JSON.stringify(stats));
        return stats;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return getDefaultStats();
    }
}

function getDefaultStats() {
    return {
        totalWorkouts: 0,
        weekWorkouts: 0,
        totalExercises: 0,
        totalSets: 0,
        weekProgress: 0,
        lastWorkout: '‚Äî',
        lastWorkoutDate: null
    };
}

function updateStatsUI(stats) {
    hideLoadingSkeletons();
    
    document.getElementById('total-workouts').textContent = stats.totalWorkouts;
    document.getElementById('week-workouts').textContent = stats.weekWorkouts;
    document.getElementById('total-exercises').textContent = stats.totalExercises;
    document.getElementById('last-workout').textContent = stats.lastWorkout;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–∞–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    updateWorkoutRecency(stats.lastWorkoutDate);
}

function updateProgressBars(stats) {
    const progressFill = document.getElementById('week-progress');
    const progressText = document.getElementById('week-progress-text');
    
    if (progressFill && progressText) {
        progressFill.style.width = `${stats.weekProgress}%`;
        progressText.textContent = `${stats.weekWorkouts}/7 –¥–Ω–µ–π`;
    }
}

function updateTrendIndicators(stats) {
    const previousStats = JSON.parse(localStorage.getItem('previousUserStats')) || getDefaultStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç—Ä–µ–Ω–¥–æ–≤
    updateTrendIndicator('total-trend', stats.totalWorkouts, previousStats.totalWorkouts);
    updateTrendIndicator('exercises-trend', stats.totalExercises, previousStats.totalExercises);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â—É—é
    localStorage.setItem('previousUserStats', JSON.stringify(stats));
}

function updateTrendIndicator(elementId, currentValue, previousValue) {
    const trendElement = document.getElementById(elementId);
    if (!trendElement) return;
    
    const difference = currentValue - previousValue;
    
    if (difference > 0) {
        trendElement.textContent = `+${difference} ‚ÜóÔ∏è`;
        trendElement.className = 'stat-trend positive';
    } else if (difference < 0) {
        trendElement.textContent = `${difference} ‚ÜòÔ∏è`;
        trendElement.className = 'stat-trend negative';
    } else {
        trendElement.textContent = '‚Üí';
        trendElement.className = 'stat-trend neutral';
    }
}

function updateWorkoutRecency(lastWorkoutDate) {
    const recencyElement = document.getElementById('workout-recency');
    if (!recencyElement || !lastWorkoutDate) return;
    
    const today = new Date();
    const lastDate = new Date(lastWorkoutDate);
    const diffTime = Math.abs(today - lastDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) {
        recencyElement.textContent = '–í—á–µ—Ä–∞ ‚úÖ';
        recencyElement.className = 'workout-recency recent';
    } else if (diffDays <= 3) {
        recencyElement.textContent = `${diffDays} –¥–Ω—è –Ω–∞–∑–∞–¥ ‚úÖ`;
        recencyElement.className = 'workout-recency recent';
    } else if (diffDays <= 7) {
        recencyElement.textContent = `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ‚ö†Ô∏è`;
        recencyElement.className = 'workout-recency warning';
    } else {
        recencyElement.textContent = `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ‚ùå`;
        recencyElement.className = 'workout-recency old';
    }
}

function loadRecentWorkouts() {
    try {
        const workoutHistory = JSON.parse(localStorage.getItem('workoutHistory')) || [];
        const container = document.getElementById('recent-workouts');
        const workoutsList = container.querySelector('.workouts-list');
        const emptyState = container.querySelector('.empty-state');
        
        if (workoutHistory.length === 0) {
            if (workoutsList) workoutsList.style.display = 'none';
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        if (workoutsList) workoutsList.style.display = 'block';
        if (emptyState) emptyState.style.display = 'none';
        
        workoutsList.innerHTML = '';
        workoutHistory.slice(0, 5).forEach((workout, index) => {
            if (!workout) return;
            
            const workoutEl = document.createElement('div');
            workoutEl.className = 'workout-item';
            workoutEl.innerHTML = `
                <div class="workout-header">
                    <strong>${formatDate(workout.date)}</strong>
                    <span class="workout-duration">${calculateWorkoutDuration(workout)}</span>
                </div>
                <div class="workout-exercises">
                    ${workout.exercises ? workout.exercises.slice(0, 3).map(ex => 
                        `<span class="exercise-tag">${ex.name || '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'}</span>`
                    ).join('') : ''}
                    ${workout.exercises && workout.exercises.length > 3 ? 
                        `<span class="more-exercises">+${workout.exercises.length - 3} –µ—â–µ</span>` : ''
                    }
                </div>
                <div class="workout-stats">
                    <span>${workout.exercises ? workout.exercises.length : 0} —É–ø—Ä.</span>
                    <span>${calculateTotalSets(workout)} –ø–æ–¥—Ö.</span>
                </div>
            `;
            workoutEl.addEventListener('click', () => {
                showWorkoutDetails(workout);
            });
            workoutsList.appendChild(workoutEl);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
        showErrorState('recent-workouts', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function loadFavoriteExercises() {
    try {
        const favoriteExercises = JSON.parse(localStorage.getItem('favoriteExercises')) || [];
        const container = document.getElementById('favorite-exercises');
        const emptyState = container.querySelector('.empty-state');
        
        if (favoriteExercises.length === 0) {
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        if (emptyState) emptyState.style.display = 'none';
        
        const exercisesData = JSON.parse(localStorage.getItem('exercises')) || [];
        const favoritesData = favoriteExercises.map(favId => 
            exercisesData.find(ex => ex && ex.id === favId)
        ).filter(ex => ex);
        
        if (favoritesData.length === 0) {
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        container.innerHTML = '';
        favoritesData.slice(0, 6).forEach(exercise => {
            const exerciseEl = document.createElement('div');
            exerciseEl.className = 'exercise-mini-item';
            exerciseEl.innerHTML = `
                <div class="exercise-icon">üí™</div>
                <div class="exercise-info">
                    <h4>${exercise.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'}</h4>
                    <p>${exercise.target || '–û–±—â–µ–µ'}</p>
                </div>
                <button class="exercise-quick-action" data-exercise-id="${exercise.id}">+</button>
            `;
            exerciseEl.addEventListener('click', (e) => {
                if (!e.target.classList.contains('exercise-quick-action')) {
                    window.location.href = `exercises.html#exercise-${exercise.id}`;
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            const quickAction = exerciseEl.querySelector('.exercise-quick-action');
            quickAction.addEventListener('click', (e) => {
                e.stopPropagation();
                addExerciseToCurrentWorkout(exercise.id);
            });
            
            container.appendChild(exerciseEl);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:', error);
        showErrorState('favorite-exercises', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function loadUpcomingWorkouts() {
    try {
        const upcomingWorkouts = JSON.parse(localStorage.getItem('upcomingWorkouts')) || [];
        const container = document.getElementById('upcoming-workouts');
        const emptyState = container.querySelector('.empty-state');
        
        if (upcomingWorkouts.length === 0) {
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        if (emptyState) emptyState.style.display = 'none';
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º empty state
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
        showErrorState('upcoming-workouts', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function loadAchievementsPreview() {
    try {
        const achievements = JSON.parse(localStorage.getItem('userAchievements')) || [];
        const container = document.getElementById('achievements-preview');
        const achievementsGrid = container.querySelector('.achievements-grid');
        const emptyState = container.querySelector('.empty-state');
        
        if (achievements.length === 0) {
            if (achievementsGrid) achievementsGrid.style.display = 'none';
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        if (achievementsGrid) achievementsGrid.style.display = 'grid';
        if (emptyState) emptyState.style.display = 'none';
        
        achievementsGrid.innerHTML = '';
        achievements.filter(ach => ach.unlocked).slice(0, 4).forEach(achievement => {
            const achievementEl = document.createElement('div');
            achievementEl.className = 'achievement-item';
            achievementEl.innerHTML = `
                <div class="achievement-icon">${achievement.icon || 'üèÜ'}</div>
                <div class="achievement-info">
                    <strong>${achievement.name}</strong>
                    <span>${achievement.description}</span>
                </div>
            `;
            achievementsGrid.appendChild(achievementEl);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        showErrorState('achievements-preview', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function setupEventListeners() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const startWorkoutBtn = document.querySelector('[href="workout.html"]');
    if (startWorkoutBtn) {
        startWorkoutBtn.addEventListener('click', function(e) {
            e.preventDefault();
            startNewWorkout();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const refreshStatsBtn = document.getElementById('refresh-stats');
    if (refreshStatsBtn) {
        refreshStatsBtn.addEventListener('click', refreshData);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const quickPlanBtn = document.getElementById('quick-plan');
    if (quickPlanBtn) {
        quickPlanBtn.addEventListener('click', showPlanWorkoutModal);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    const motivationTipBtn = document.getElementById('motivation-tip');
    if (motivationTipBtn) {
        motivationTipBtn.addEventListener('click', showMotivationModal);
    }
    
    // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    const exportDataBtn = document.getElementById('export-data');
    if (exportDataBtn) {
        exportDataBtn.addEventListener('click', exportUserData);
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    let refreshTimeout;
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            clearTimeout(refreshTimeout);
            refreshTimeout = setTimeout(refreshData, 1000);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    setupModalHandlers();
}

function setupModalHandlers() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.close-modal').forEach(button => {
        button.addEventListener('click', function() {
            this.closest('.modal').setAttribute('hidden', 'true');
        });
    });
    
    // –ö–ª–∏–∫ –ø–æ backdrop
    document.getElementById('backdrop').addEventListener('click', function() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.setAttribute('hidden', 'true');
        });
    });
}

function setupNotificationSystem() {
    window.showNotification = function(message, type = 'info', duration = 3000) {
        const notification = document.getElementById('notification');
        const notificationText = document.getElementById('notification-text');
        
        if (!notification || !notificationText) return;
        
        notificationText.textContent = message;
        notification.className = `notification ${type}`;
        notification.removeAttribute('hidden');
        
        setTimeout(() => {
            notification.setAttribute('hidden', 'true');
        }, duration);
    };
}

function showPlanWorkoutModal() {
    const modal = document.getElementById('plan-workout-modal');
    if (modal) {
        modal.removeAttribute('hidden');
    }
}

function showMotivationModal() {
    const modal = document.getElementById('motivation-modal');
    const motivationText = document.getElementById('daily-motivation');
    
    if (modal && motivationText) {
        motivationText.textContent = getRandomMotivationalQuote();
        modal.removeAttribute('hidden');
    }
}

function loadMotivationalQuote() {
    const quoteElement = document.getElementById('motivational-quote');
    if (quoteElement) {
        quoteElement.textContent = getRandomMotivationalQuote();
    }
}

function getRandomMotivationalQuote() {
    const quotes = [
        "–ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏",
        "–°–∏–ª–∞ –Ω–µ –≤ –º—ã—à—Ü–∞—Ö, –∞ –≤ —Å–∏–ª–µ –≤–æ–ª–∏",
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä—É–¥ ‚Äî –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è, —Ç—ã –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏, —á–µ–º –≤—á–µ—Ä–∞",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
        "–¢–≤–æ–µ —Ç–µ–ª–æ –º–æ–∂–µ—Ç –≤—Å–µ, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É–±–µ–¥–∏—Ç—å –≤ —ç—Ç–æ–º —Ä–∞–∑—É–º",
        "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å",
        "–õ—É—á—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî —Ç–∞, —á—Ç–æ —Å–¥–µ–ª–∞–Ω–∞"
    ];
    
    return quotes[Math.floor(Math.random() * quotes.length)];
}

function startNewWorkout() {
    const today = new Date().toISOString().split('T')[0];
    localStorage.setItem('currentWorkoutDate', today);
    window.location.href = 'workout.html';
}

function addExerciseToCurrentWorkout(exerciseId) {
    // –õ–æ–≥–∏–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    showNotification('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'success');
}

function exportUserData() {
    try {
        const userData = {
            workoutHistory: JSON.parse(localStorage.getItem('workoutHistory')) || [],
            favoriteExercises: JSON.parse(localStorage.getItem('favoriteExercises')) || [],
            userStats: JSON.parse(localStorage.getItem('userStats')) || {},
            exportDate: new Date().toISOString()
        };
        
        const dataStr = JSON.stringify(userData, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `workout_data_${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

function checkAchievements() {
    // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const stats = JSON.parse(localStorage.getItem('userStats')) || getDefaultStats();
    const achievements = JSON.parse(localStorage.getItem('userAchievements')) || [];
    
    const newAchievements = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (stats.totalWorkouts >= 1 && !achievements.some(a => a.id === 'first_workout')) {
        newAchievements.push({
            id: 'first_workout',
            name: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!',
            description: '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            icon: 'üéØ',
            unlocked: true
        });
    }
    
    if (stats.totalWorkouts >= 10 && !achievements.some(a => a.id === 'consistent_beginner')) {
        newAchievements.push({
            id: 'consistent_beginner',
            name: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫',
            description: '10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            icon: 'üî•',
            unlocked: true
        });
    }
    
    if (stats.weekWorkouts >= 5 && !achievements.some(a => a.id === 'active_week')) {
        newAchievements.push({
            id: 'active_week',
            name: '–ê–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
            description: '5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é',
            icon: '‚ö°',
            unlocked: true
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newAchievements.length > 0) {
        const updatedAchievements = [...achievements, ...newAchievements];
        localStorage.setItem('userAchievements', JSON.stringify(updatedAchievements));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        newAchievements.forEach(achievement => {
            showNotification(`–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}`, 'success', 5000);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        loadAchievementsPreview();
    }
}

function refreshData() {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    loadUserData();
    loadMotivationalQuote();
    checkAchievements();
    showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'info', 2000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
            return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
        }
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
}

function calculateWorkoutDuration(workout) {
    if (!workout.startTime || !workout.endTime) return '~45 –º–∏–Ω';
    
    try {
        const start = new Date(workout.startTime);
        const end = new Date(workout.endTime);
        const duration = Math.round((end - start) / (1000 * 60)); // –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        return duration > 0 ? `${duration} –º–∏–Ω` : '~45 –º–∏–Ω';
    } catch (error) {
        return '~45 –º–∏–Ω';
    }
}

function calculateTotalSets(workout) {
    if (!workout.exercises) return 0;
    return workout.exercises.reduce((total, exercise) => total + (exercise.sets || 0), 0);
}

function showLoadingSkeletons() {
    const stats = ['total-workouts', 'week-workouts', 'total-exercises', 'last-workout'];
    stats.forEach(statId => {
        const element = document.getElementById(statId);
        if (element) {
            element.innerHTML = '<div class="skeleton-loader"></div>';
        }
    });
}

function hideLoadingSkeletons() {
    const skeletons = document.querySelectorAll('.skeleton-loader');
    skeletons.forEach(skeleton => {
        if (skeleton.parentElement) {
            skeleton.parentElement.textContent = skeleton.parentElement.textContent.replace('
			            skeleton.remove();
        }
    });
}

function showEmptyStats() {
    document.getElementById('total-workouts').textContent = '0';
    document.getElementById('week-workouts').textContent = '0';
    document.getElementById('total-exercises').textContent = '0';
    document.getElementById('last-workout').textContent = '‚Äî';
}

function showErrorState(containerId, message) {
    const container = document.getElementById(containerId);
    if (container) {
        container.innerHTML = `
            <div class="error-state">
                <div class="error-icon">‚ö†Ô∏è</div>
                <p>${message}</p>
                <button class="btn small" onclick="refreshData()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

function showWorkoutDetails(workout) {
    if (workout && workout.date) {
        window.location.href = `history.html?date=${workout.date}`;
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
const motivationalQuotes = {
    morning: [
        "–£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å! üåÖ",
        "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –ø–æ–±–µ–¥—ã –Ω–∞–¥ —Å–æ–±–æ–π! üí™",
        "–£—Ç—Ä–æ ‚Äî –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! ‚òÄÔ∏è"
    ],
    day: [
        "–ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏",
        "–°–∏–ª–∞ –Ω–µ –≤ –º—ã—à—Ü–∞—Ö, –∞ –≤ —Å–∏–ª–µ –≤–æ–ª–∏",
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä—É–¥ ‚Äî –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    ],
    evening: [
        "–í–µ—á–µ—Ä–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å! üåô",
        "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, –æ —á–µ–º –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å –∂–∞–ª–µ—Ç—å! üî•",
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üí´"
    ],
    achievement: [
        "–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π! üöÄ",
        "–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üìà",
        "–í–∞—à–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! üåü"
    ]
};

function getContextualMotivationalQuote() {
    const hour = new Date().getHours();
    const stats = JSON.parse(localStorage.getItem('userStats')) || getDefaultStats();
    
    let quoteCategory = 'day';
    
    if (hour < 12) {
        quoteCategory = 'morning';
    } else if (hour < 18) {
        quoteCategory = 'day';
    } else {
        quoteCategory = 'evening';
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º achievement —Ü–∏—Ç–∞—Ç—ã
    if (stats.weekWorkouts >= 3) {
        quoteCategory = 'achievement';
    }
    
    const quotes = motivationalQuotes[quoteCategory];
    return quotes[Math.floor(Math.random() * quotes.length)];
}

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function setupReminders() {
    const lastReminder = localStorage.getItem('lastReminderDate');
    const today = new Date().toISOString().split('T')[0];
    
    if (lastReminder !== today) {
        const stats = JSON.parse(localStorage.getItem('userStats')) || getDefaultStats();
        const lastWorkoutDate = stats.lastWorkoutDate;
        
        if (lastWorkoutDate) {
            const today = new Date();
            const lastDate = new Date(lastWorkoutDate);
            const diffDays = Math.ceil((today - lastDate) / (1000 * 60 * 60 * 24));
            
            if (diffDays >= 3) {
                showNotification(`–ü—Ä–æ—à–ª–æ ${diffDays} –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å!`, 'warning', 5000);
            }
        } else if (stats.totalWorkouts === 0) {
            showNotification('–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–ø—É—Ç—å —Å–µ–≥–æ–¥–Ω—è! –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∂–¥–µ—Ç!', 'info', 5000);
        }
        
        localStorage.setItem('lastReminderDate', today);
    }
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
function generateWorkoutInsights() {
    const workoutHistory = JSON.parse(localStorage.getItem('workoutHistory')) || [];
    const stats = JSON.parse(localStorage.getItem('userStats')) || getDefaultStats();
    
    const insights = [];
    
    // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if (stats.weekWorkouts === 0) {
        insights.push({
            type: 'warning',
            message: '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å!',
            action: 'start_workout'
        });
    } else if (stats.weekWorkouts >= 3) {
        insights.push({
            type: 'success',
            message: `–û—Ç–ª–∏—á–Ω–∞—è –Ω–µ–¥–µ–ª—è! –£–∂–µ ${stats.weekWorkouts} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.`,
            action: null
        });
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    const exerciseFrequency = {};
    workoutHistory.forEach(workout => {
        if (workout.exercises) {
            workout.exercises.forEach(exercise => {
                if (exercise.id) {
                    exerciseFrequency[exercise.id] = (exerciseFrequency[exercise.id] || 0) + 1;
                }
            });
        }
    });
    
    const mostFrequent = Object.entries(exerciseFrequency)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3);
    
    if (mostFrequent.length > 0) {
        insights.push({
            type: 'info',
            message: `–ß–∞—â–µ –≤—Å–µ–≥–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ: ${mostFrequent.map(([id, count]) => `${count} —Ä–∞–∑`).join(', ')}`,
            action: 'view_exercises'
        });
    }
    
    return insights;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function displayWorkoutInsights() {
    const insights = generateWorkoutInsights();
    
    if (insights.length > 0) {
        const mainInsight = insights[0];
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ insights –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        console.log('Workout Insights:', insights);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (mainInsight.type === 'warning') {
            showNotification(mainInsight.message, mainInsight.type, 6000);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(setupReminders, 3000);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    setTimeout(displayWorkoutInsights, 5000);
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    initializeMockData();
}

function initializeMockData() {
    if (!localStorage.getItem('workoutHistory')) {
        const mockWorkouts = [
            {
                date: new Date().toISOString().split('T')[0],
                startTime: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                endTime: new Date(Date.now() - 1.5 * 60 * 60 * 1000).toISOString(),
                exercises: [
                    { id: '0001', name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', sets: 3, reps: 12, target: '–ù–æ–≥–∏' },
                    { id: '0002', name: '–û—Ç–∂–∏–º–∞–Ω–∏—è', sets: 4, reps: 15, target: '–ì—Ä—É–¥—å' },
                    { id: '0003', name: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', sets: 3, reps: 8, target: '–°–ø–∏–Ω–∞' }
                ]
            },
            {
                date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                exercises: [
                    { id: '0004', name: '–ñ–∏–º –ª–µ–∂–∞', sets: 4, reps: 10, target: '–ì—Ä—É–¥—å' },
                    { id: '0005', name: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞', sets: 3, reps: 8, target: '–°–ø–∏–Ω–∞' }
                ]
            }
        ];
        localStorage.setItem('workoutHistory', JSON.stringify(mockWorkouts));
    }

    if (!localStorage.getItem('favoriteExercises')) {
        localStorage.setItem('favoriteExercises', JSON.stringify(['0001', '0002', '0003']));
    }
    
    if (!localStorage.getItem('exercises')) {
        const mockExercises = [
            { id: '0001', name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', target: '–ù–æ–≥–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≥', difficulty: '–ù–∞—á–∞–ª—å–Ω—ã–π' },
            { id: '0002', name: '–û—Ç–∂–∏–º–∞–Ω–∏—è', target: '–ì—Ä—É–¥—å', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–¥–∏ –∏ —Ä—É–∫', difficulty: '–ù–∞—á–∞–ª—å–Ω—ã–π' },
            { id: '0003', name: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', target: '–°–ø–∏–Ω–∞', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à—Ü —Å–ø–∏–Ω—ã', difficulty: '–°—Ä–µ–¥–Ω–∏–π' },
            { id: '0004', name: '–ñ–∏–º –ª–µ–∂–∞', target: '–ì—Ä—É–¥—å', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü', difficulty: '–°—Ä–µ–¥–Ω–∏–π' },
            { id: '0005', name: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞', target: '–°–ø–∏–Ω–∞', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–ª–∞', difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' }
        ];
        localStorage.setItem('exercises', JSON.stringify(mockExercises));
    }
    
    if (!localStorage.getItem('userAchievements')) {
        const mockAchievements = [
            {
                id: 'first_workout',
                name: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!',
                description: '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                icon: 'üéØ',
                unlocked: true
            }
        ];
        localStorage.setItem('userAchievements', JSON.stringify(mockAchievements));
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
let isRefreshing = false;
function optimizedRefreshData() {
    if (isRefreshing) return;
    
    isRefreshing = true;
    refreshData();
    
    setTimeout(() => {
        isRefreshing = false;
    }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', 'error');
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.Dashboard = {
    refreshData: optimizedRefreshData,
    showNotification: showNotification,
    exportUserData: exportUserData,
    startNewWorkout: startNewWorkout
};

console.log('–£–ª—É—á—à–µ–Ω–Ω—ã–π Dashboard –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function setupModalHandlers() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    document.querySelectorAll('.close-modal').forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
            const modal = this.closest('.modal');
            if (modal) {
                modal.setAttribute('hidden', 'true');
                document.body.classList.remove('modal-open');
            }
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.setAttribute('hidden', 'true');
            document.body.classList.remove('modal-open');
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            const openModal = document.querySelector('.modal:not([hidden])');
            if (openModal) {
                openModal.setAttribute('hidden', 'true');
                document.body.classList.remove('modal-open');
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
function showMotivationModal() {
    const modal = document.getElementById('motivation-modal');
    const motivationText = document.getElementById('daily-motivation');
    
    if (modal && motivationText) {
        motivationText.textContent = getRandomMotivationalQuote();
        modal.removeAttribute('hidden');
        document.body.classList.add('modal-open');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function showPlanWorkoutModal() {
    const modal = document.getElementById('plan-workout-modal');
    if (modal) {
        modal.removeAttribute('hidden');
        document.body.classList.add('modal-open');
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç CSS –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
