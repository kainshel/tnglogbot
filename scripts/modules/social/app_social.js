// scripts/modules/social/app_social.js

document.addEventListener('DOMContentLoaded', function() {
    initializeSocialPage();
    loadUserData();
    loadFriends();
    loadActivities();
    loadAchievements();
    setupEventListeners();
});

function initializeSocialPage() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const today = new Date();
    document.getElementById('currentDate').textContent = today.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

function loadUserData() {
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = JSON.parse(localStorage.getItem('userProfile')) || {};
        const userName = userData.name || '–°–ø–æ—Ä—Ç—Å–º–µ–Ω';
        const userLevel = userData.level || '–ù–æ–≤–∏—á–æ–∫';
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('userName').textContent = userName;
        document.getElementById('userLevel').textContent = `–£—Ä–æ–≤–µ–Ω—å: ${userLevel}`;
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        const initials = userName.split(' ').map(n => n[0]).join('').toUpperCase();
        document.getElementById('avatarInitials').textContent = initials || '–°–ü';
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        loadUserStats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

function loadUserStats() {
    try {
        const stats = JSON.parse(localStorage.getItem('userStats')) || calculateUserStats();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ badges
        document.getElementById('userWorkouts').textContent = stats.totalWorkouts || 0;
        document.getElementById('userStreak').textContent = calculateCurrentStreak();
        document.getElementById('userFriends').textContent = countFriends();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

function calculateUserStats() {
    const workoutHistory = JSON.parse(localStorage.getItem('workoutHistory')) || [];
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay());
    startOfWeek.setHours(0, 0, 0, 0);
    
    const weekWorkouts = workoutHistory.filter(workout => {
        const workoutDate = new Date(workout.date);
        return workoutDate >= startOfWeek;
    }).length;
    
    const allExercises = new Set();
    workoutHistory.forEach(workout => {
        workout.exercises.forEach(exercise => {
            allExercises.add(exercise.id);
        });
    });
    
    const stats = {
        totalWorkouts: workoutHistory.length,
        weekWorkouts: weekWorkouts,
        totalExercises: allExercises.size,
        lastWorkout: workoutHistory.length > 0 ? formatDate(workoutHistory[0].date) : '‚Äî'
    };
    
    localStorage.setItem('userStats', JSON.stringify(stats));
    return stats;
}

function calculateCurrentStreak() {
    const workoutHistory = JSON.parse(localStorage.getItem('workoutHistory')) || [];
    if (workoutHistory.length === 0) return 0;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedWorkouts = [...workoutHistory].sort((a, b) => 
        new Date(b.date) - new Date(a.date)
    );
    
    let streak = 0;
    let currentDate = new Date();
    currentDate.setHours(0, 0, 0, 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    if (sortedWorkouts[0].date === today) {
        streak = 1;
        currentDate.setDate(currentDate.getDate() - 1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
    for (let i = streak > 0 ? 1 : 0; i < sortedWorkouts.length; i++) {
        const workoutDate = new Date(sortedWorkouts[i].date);
        workoutDate.setHours(0, 0, 0, 0);
        
        const diffTime = currentDate - workoutDate;
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 1) {
            streak++;
            currentDate.setDate(currentDate.getDate() - 1);
        } else if (diffDays > 1) {
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
        }
    }
    
    return streak;
}

function countFriends() {
    const friends = JSON.parse(localStorage.getItem('friends')) || [];
    return friends.filter(friend => friend.status === 'accepted').length;
}

function loadFriends() {
    try {
        const friends = JSON.parse(localStorage.getItem('friends')) || [];
        const container = document.getElementById('friends-container');
        
        if (friends.length === 0) {
            container.innerHTML = '<p class="empty-state">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>';
            return;
        }
        
        const acceptedFriends = friends.filter(friend => friend.status === 'accepted');
        
        if (acceptedFriends.length === 0) {
            container.innerHTML = '<p class="empty-state">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>';
            return;
        }
        
        container.innerHTML = '';
        acceptedFriends.forEach(friend => {
            const friendEl = createFriendElement(friend);
            container.appendChild(friendEl);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:', error);
        const container = document.getElementById('friends-container');
        container.innerHTML = '<p class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π</p>';
    }
}

function createFriendElement(friend) {
    const friendEl = document.createElement('div');
    friendEl.className = 'friend-item';
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
    const initials = friend.name.split(' ').map(n => n[0]).join('').toUpperCase();
    
    friendEl.innerHTML = `
        <div class="friend-avatar">${initials}</div>
        <div class="friend-info">
            <div class="friend-name">${friend.name}</div>
            <div class="friend-stats">
                <span class="friend-stat">üèãÔ∏è ${friend.workouts || 0}</span>
                <span class="friend-stat">üî• ${friend.streak || 0}</span>
                <span class="friend-stat">üí™ ${friend.level || '–ù–æ–≤–∏—á–æ–∫'}</span>
            </div>
        </div>
        <div class="friend-actions">
            <button class="btn small view-friend" data-friend-id="${friend.id}">–ü—Ä–æ—Ñ–∏–ª—å</button>
            <button class="btn small secondary remove-friend" data-friend-id="${friend.id}">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    friendEl.querySelector('.view-friend').addEventListener('click', () => {
        viewFriendProfile(friend.id);
    });
    
    friendEl.querySelector('.remove-friend').addEventListener('click', () => {
        removeFriend(friend.id);
    });
    
    return friendEl;
}

function viewFriendProfile(friendId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞
    const friends = JSON.parse(localStorage.getItem('friends')) || [];
    const friend = friends.find(f => f.id === friendId);
    
    if (!friend) {
        alert('–î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const modalContent = document.getElementById('friendProfileContent');
    modalContent.innerHTML = `
        <h2>–ü—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞</h2>
        <div class="friend-profile-header">
            <div class="friend-avatar-large">${friend.name.split(' ').map(n => n[0]).join('').toUpperCase()}</div>
            <div class="friend-details">
                <h3>${friend.name}</h3>
                <p>–£—Ä–æ–≤–µ–Ω—å: ${friend.level || '–ù–æ–≤–∏—á–æ–∫'}</p>
                <p>–ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å: ${formatDate(friend.joinedDate)}</p>
            </div>
        </div>
        
        <div class="friend-stats-grid">
            <div class="stat-card">
                <div class="stat-value">${friend.workouts || 0}</div>
                <div class="stat-label">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${friend.streak || 0}</div>
                <div class="stat-label">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${friend.achievements || 0}</div>
                <div class="stat-label">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${friend.consistency || 0}%</div>
                <div class="stat-label">–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å</div>
            </div>
        </div>
        
        <h3>–ù–µ–¥–∞–≤–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
        <div class="friend-activities">
            <p class="empty-state">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –¥—Ä—É–≥–∞</p>
        </div>
        
        <div class="modal-actions">
            <button class="btn" id="challengeFriend">–ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤</button>
            <button class="btn secondary" id="compareWithFriend">–°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
        </div>
    `;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('friendProfileModal').style.display = 'flex';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    document.getElementById('challengeFriend').addEventListener('click', () => {
        challengeFriend(friend.id);
    });
    
    document.getElementById('compareWithFriend').addEventListener('click', () => {
        compareWithFriend(friend.id);
    });
}

function removeFriend(friendId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞?')) {
        return;
    }
    
    try {
        const friends = JSON.parse(localStorage.getItem('friends')) || [];
        const updatedFriends = friends.filter(friend => friend.id !== friendId);
        localStorage.setItem('friends', JSON.stringify(updatedFriends));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
        loadFriends();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞', 'error');
    }
}

function loadActivities() {
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—Ä—É–∑–µ–π
        const activities = JSON.parse(localStorage.getItem('friendActivities')) || generateMockActivities();
        const container = document.getElementById('activity-feed');
        const filter = document.getElementById('activityFilter').value;
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        let filteredActivities = activities;
        if (filter !== 'all') {
            filteredActivities = activities.filter(activity => activity.type === filter);
        }
        
        if (filteredActivities.length === 0) {
            container.innerHTML = '<p class="empty-state">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>';
            return;
        }
        
        container.innerHTML = '';
        filteredActivities.forEach(activity => {
            const activityEl = createActivityElement(activity);
            container.appendChild(activityEl);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
        const container = document.getElementById('activity-feed');
        container.innerHTML = '<p class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</p>';
    }
}

function createActivityElement(activity) {
    const activityEl = document.createElement('div');
    activityEl.className = 'activity-item';
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
    const initials = activity.userName.split(' ').map(n => n[0]).join('').toUpperCase();
    
    activityEl.innerHTML = `
        <div class="activity-avatar">${initials}</div>
        <div class="activity-content">
            <div>
                <span class="activity-user">${activity.userName}</span>
                <span class="activity-action">${getActivityText(activity)}</span>
            </div>
            <p class="activity-text">${activity.details || ''}</p>
            <div class="activity-meta">${formatDate(activity.date, true)}</div>
        </div>
    `;
    
    return activityEl;
}

function getActivityText(activity) {
    switch(activity.type) {
        case 'workouts':
            return '–∑–∞–≤–µ—Ä—à–∏–ª(–∞) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É';
        case 'achievements':
            return '–ø–æ–ª—É—á–∏–ª(–∞) –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
        case 'personalBests':
            return '—É—Å—Ç–∞–Ω–æ–≤–∏–ª(–∞) –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥';
        default:
            return '–≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –¥–µ–π—Å—Ç–≤–∏–µ';
    }
}

function loadAchievements() {
    try {
        const achievements = JSON.parse(localStorage.getItem('achievements')) || generateMockAchievements();
        const container = document.getElementById('achievements-container');
        
        container.innerHTML = '';
        achievements.forEach(achievement => {
            const achievementEl = createAchievementElement(achievement);
            container.appendChild(achievementEl);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        const container = document.getElementById('achievements-container');
        container.innerHTML = '<p class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>';
    }
}

function createAchievementElement(achievement) {
    const achievementEl = document.createElement('div');
    achievementEl.className = `achievement-card ${achievement.earned ? '' : 'locked'}`;
    
    achievementEl.innerHTML = `
        <div class="achievement-icon">${achievement.icon}</div>
        <div class="achievement-title">${achievement.title}</div>
        <div class="achievement-desc">${achievement.description}</div>
        ${achievement.earned ? 
            `<div class="achievement-date">–ü–æ–ª—É—á–µ–Ω–æ: ${formatDate(achievement.earnedDate)}</div>` : 
            `<div class="achievement-progress">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${achievement.progress}%</div>`
        }
    `;
    
    return achievementEl;
}

function setupEventListeners() {
    // –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π
    document.getElementById('friendSearch').addEventListener('input', debounce(() => {
        searchFriends();
    }, 300));
    
    // –§–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    document.getElementById('activityFilter').addEventListener('change', () => {
        loadActivities();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
    document.getElementById('addFriendBtn').addEventListener('click', () => {
        document.getElementById('addFriendModal').style.display = 'flex';
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.getElementById('closeAddFriendModal').addEventListener('click', () => {
        document.getElementById('addFriendModal').style.display = 'none';
    });
    
    document.getElementById('closeFriendModal').addEventListener('click', () => {
        document.getElementById('friendProfileModal').style.display = 'none';
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥—Ä—É–∂–±—É
    document.getElementById('sendFriendRequest').addEventListener('click', () => {
        sendFriendRequest();
    });
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    document.getElementById('shareAchievements').addEventListener('click', () => {
        shareAchievements();
    });
}

function searchFriends() {
    const searchTerm = document.getElementById('friendSearch').value.toLowerCase();
    const friends = JSON.parse(localStorage.getItem('friends')) || [];
    const container = document.getElementById('friends-container');
    
    if (searchTerm === '') {
        loadFriends();
        return;
    }
    
    const filteredFriends = friends.filter(friend => 
        friend.name.toLowerCase().includes(searchTerm) && friend.status === 'accepted'
    );
    
    if (filteredFriends.length === 0) {
        container.innerHTML = '<p class="empty-state">–î—Ä—É–∑—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }
    
    container.innerHTML = '';
    filteredFriends.forEach(friend => {
        const friendEl = createFriendElement(friend);
        container.appendChild(friendEl);
    });
}

function sendFriendRequest() {
    const username = document.getElementById('friendUsername').value.trim();
    const message = document.getElementById('friendMessage').value.trim();
    
    if (!username) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
        const friends = JSON.parse(localStorage.getItem('friends')) || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingFriend = friends.find(f => f.id === username || f.name === username);
        if (existingFriend) {
            alert(existingFriend.status === 'pending' ? 
                '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"
        friends.push({
            id: username,
            name: username, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–º—è –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–æ—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞
            status: 'pending',
            requestedDate: new Date().toISOString()
        });
        
        localStorage.setItem('friends', JSON.stringify(friends));
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª—è
        document.getElementById('addFriendModal').style.display = 'none';
        document.getElementById('friendUsername').value = '';
        document.getElementById('friendMessage').value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
    }
}

function shareAchievements() {
    const achievements = JSON.parse(localStorage.getItem('achievements')) || [];
    const earnedAchievements = achievements.filter(a => a.earned);
    
    if (earnedAchievements.length === 0) {
        alert('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—èÂàÜ‰∫´');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å APIÂàÜ‰∫´
    const shareText = `–Ø –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) ${earnedAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –î–Ω–µ–≤–Ω–∏–∫ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üèãÔ∏èüí™\n\n–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n` +
        earnedAchievements.map(a => `- ${a.title}: ${a.description}`).join('\n');
    
    if (navigator.share) {
        navigator.share({
            title: '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –î–Ω–µ–≤–Ω–∏–∫–µ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            text: shareText
        }).catch(() => {
            // Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            copyToClipboard(shareText);
        });
    } else {
        copyToClipboard(shareText);
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
    });
}

function challengeFriend(friendId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –≤—ã–∑–æ–≤
    alert(`–í—ã–∑–æ–≤ –¥—Ä—É–≥—É ${friendId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±—É–¥—É—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`);
}

function compareWithFriend(friendId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–º
    alert(`–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–º ${friendId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –±—É–¥—É—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`);
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'};
        color: white;
        padding: 1rem;
        border-radius: 4px;
        z-index: 10000;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString, relative = false) {
    if (!dateString) return '‚Äî';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    
    if (relative) {
        const now = new Date();
        const diffTime = Math.abs(now - date);
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
        if (diffDays === 1) return '–í—á–µ—Ä–∞';
        if (diffDays < 7) return `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
    }
    
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function generateMockActivities() {
    return [
        {
            type: 'workouts',
            userName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            details: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: 15 –ø–æ–¥—Ö–æ–¥–æ–≤, 1200 –∫–≥ –æ–±—â–∏–π —Ç–æ–Ω–Ω–∞–∂',
            date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
        },
        {
            type: 'achievements',
            userName: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
            details: '–ú–∞—Å—Ç–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: 50 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            date: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString()
        },
        {
            type: 'personalBests',
            userName: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞',
            details: '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∂–∏–º–µ –ª–µ–∂–∞: 80 –∫–≥',
            date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
        }
    ];
}

function generateMockAchievements() {
    return [
        {
            icon: 'üèÜ',
            title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
            description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à—É –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            earned: true,
            earnedDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
            progress: 100
        },
        {
            icon: 'üî•',
            title: '–ù–µ–¥–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
            earned: false,
            progress: 57
        },
        {
            icon: 'üí™',
            title: '–°–∏–ª–∞—á',
            description: '–ü–æ–¥–Ω–∏–º–∏—Ç–µ 1000 –∫–≥ –∑–∞ –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            earned: true,
            earnedDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
            progress: 100
        }
    ];
}