// ---- Safe localStorage patch (auto-injected) ----
(function(){
  if (!('localStorage' in window)) return;
  try {
    const _set = localStorage.setItem.bind(localStorage);
    const _get = localStorage.getItem.bind(localStorage);
    const _remove = localStorage.removeItem.bind(localStorage);
    const _clear = localStorage.clear.bind(localStorage);
    localStorage.setItem = function(k,v){ try { return _set(k,v); } catch(e){ console.error('localStorage.setItem error', e); } };
    localStorage.getItem = function(k){ try { return _get(k); } catch(e){ console.error('localStorage.getItem error', e); return null; } };
    localStorage.removeItem = function(k){ try { return _remove(k); } catch(e){ console.error('localStorage.removeItem error', e); } };
    localStorage.clear = function(){ try { return _clear(); } catch(e){ console.error('localStorage.clear error', e); } };
  } catch(e){ /* silent */ }
})();
// -----------------------------------------------

// –ö—ç—à–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const domElements = {
  container: document.getElementById('exercises-container'),
  filterGroups: document.getElementById('filter-groups'),
  filterTargets: document.getElementById('filter-targets'),
  filterType: document.getElementById('filter-type'),
  filterEquipment: document.getElementById('filter-equipment'),
  searchInput: document.getElementById('exSearch'),
  modalBack: document.getElementById('modalBack'),
  modalContent: document.getElementById('modalContent'),
  modalClose: document.getElementById('modalClose')
};

let exercises = [];
let currentFilters = {
  search: '',
  group: '',
  target: '',
  type: '',
  equipment: ''
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function createExerciseImage(gifSrc, altText, className = 'exercise-gif') {
  const img = document.createElement('img');
  img.src = gifSrc;
  img.alt = altText || '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è';
  img.className = className;
  img.loading = 'lazy';
  
  img.onerror = function() {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${gifSrc}`);
    img.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º placeholder –≤–º–µ—Å—Ç–æ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const placeholder = document.createElement('div');
    placeholder.className = 'image-placeholder';
    placeholder.innerHTML = 'üì∑<br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ<br>–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    img.parentNode.insertBefore(placeholder, img);
    img.remove();
  };
  
  return img;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
function showErrorMessage(message, isRetryable = true) {
  const errorDiv = document.createElement('div');
  errorDiv.className = 'error-message';
  errorDiv.innerHTML = `
    <p>${message}</p>
    ${isRetryable ? '<button onclick="location.reload()" class="btn retry-btn">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>' : ''}
  `;
  
  const content = document.querySelector('.content');
  if (content) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    const oldError = content.querySelector('.error-message');
    if (oldError) oldError.remove();
    
    content.insertBefore(errorDiv, content.firstChild);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator() {
  if (!domElements.container) return;
  
  domElements.container.innerHTML = `
    <div class="loading-indicator">
      <div class="spinner"></div>
      <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...</p>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –ø–æ–∏—Å–∫–∞
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
async function loadExercises() {
  try {
    showLoadingIndicator();
    
    const res = await fetch('data/exercises.json', { 
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    if (!res.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${res.status}`);
    }
    
    const data = await res.json();
    
    if (!data || !Array.isArray(data) || data.length === 0) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π');
    }
    
    exercises = data;
    normalizeData();
    fillFilters();
    renderExercises(exercises);
    
    return exercises;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:', error);
    
    let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. ';
    
    if (error.message.includes('HTTP')) {
      errorMessage += '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ —Ñ–∞–π–ª–æ–º –¥–∞–Ω–Ω—ã—Ö.';
    } else if (error.message.includes('–ø—É—Å—Ç–æ–π')) {
      errorMessage += '–§–∞–π–ª —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç.';
    } else {
      errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
    }
    
    showErrorMessage(errorMessage);
    return [];
  }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function normalizeData() {
  exercises = exercises
    .filter(ex => ex && ex.id) // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    .map(ex => ({
      ...ex,
      name_ru: ex.name_ru?.trim() || ex.name_en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      name_en: ex.name_en?.trim() || ex.name_ru || 'No name',
      type: ex.type?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω',
      groups: Array.isArray(ex.groups) ? ex.groups.filter(Boolean) : [],
      targets: Array.isArray(ex.targets) ? ex.targets.filter(Boolean) : [],
      equipment: Array.isArray(ex.equipment) ? ex.equipment.filter(Boolean) : [],
      gif: ex.gif ? ex.gif.replace(/ /g, '%20').replace(/\\/g, '/') : null
    }))
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ id
    .filter((ex, index, self) => 
      index === self.findIndex(e => e.id === ex.id)
    )
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    .sort((a, b) => a.name_ru.localeCompare(b.name_ru));
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function fillFilters() {
  // –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
  [domElements.filterGroups, domElements.filterTargets, domElements.filterType, domElements.filterEquipment].forEach(filter => {
    if (filter) filter.innerHTML = '<option value="">–í—Å–µ</option>';
  });
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
  const groups = [...new Set(exercises.flatMap(ex => ex.groups))].sort();
  groups.forEach(g => {
    const opt = document.createElement('option');
    opt.value = g;
    opt.textContent = g;
    if (domElements.filterGroups) domElements.filterGroups.appendChild(opt);
  });
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–æ–Ω—ã
  const targets = [...new Set(exercises.flatMap(ex => ex.targets))].sort();
  targets.forEach(t => {
    const opt = document.createElement('option');
    opt.value = t;
    opt.textContent = t;
    if (domElements.filterTargets) domElements.filterTargets.appendChild(opt);
  });
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  const types = [...new Set(exercises.map(ex => ex.type))].sort();
  types.forEach(t => {
    const opt = document.createElement('option');
    opt.value = t;
    opt.textContent = t;
    if (domElements.filterType) domElements.filterType.appendChild(opt);
  });
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  const equipments = [...new Set(exercises.flatMap(ex => ex.equipment))].sort();
  equipments.forEach(eq => {
    const opt = document.createElement('option');
    opt.value = eq;
    opt.textContent = eq;
    if (domElements.filterEquipment) domElements.filterEquipment.appendChild(opt);
  });
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  setupDependentFilters();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function setupDependentFilters() {
  if (!domElements.filterGroups || !domElements.filterTargets) return;
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  domElements.filterGroups.onchange = null;
  domElements.filterTargets.onchange = null;
  
  domElements.filterGroups.addEventListener('change', function() {
    updateTargetsFilter(this.value);
    applyFilters();
  });
  
  domElements.filterTargets.addEventListener('change', function() {
    updateGroupsFilter(this.value);
    applyFilters();
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–ª–µ–≤—ã—Ö –∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
function updateTargetsFilter(selectedGroup) {
  if (!domElements.filterTargets) return;
  
  const currentTarget = domElements.filterTargets.value;
  domElements.filterTargets.innerHTML = '<option value="">–í—Å–µ</option>';
  
  if (!selectedGroup) {
    const allTargets = [...new Set(exercises.flatMap(ex => ex.targets))].sort();
    allTargets.forEach(target => {
      const opt = document.createElement('option');
      opt.value = target;
      opt.textContent = target;
      if (target === currentTarget) opt.selected = true;
      domElements.filterTargets.appendChild(opt);
    });
    return;
  }
  
  const filteredExercises = exercises.filter(ex => ex.groups.includes(selectedGroup));
  const availableTargets = [...new Set(filteredExercises.flatMap(ex => ex.targets))].sort();
  
  availableTargets.forEach(target => {
    const opt = document.createElement('option');
    opt.value = target;
    opt.textContent = target;
    if (target === currentTarget && availableTargets.includes(currentTarget)) {
      opt.selected = true;
    }
    domElements.filterTargets.appendChild(opt);
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≥—Ä—É–ø–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
function updateGroupsFilter(selectedTarget) {
  if (!domElements.filterGroups) return;
  
  const currentGroup = domElements.filterGroups.value;
  domElements.filterGroups.innerHTML = '<option value="">–í—Å–µ</option>';
  
  if (!selectedTarget) {
    const allGroups = [...new Set(exercises.flatMap(ex => ex.groups))].sort();
    allGroups.forEach(group => {
      const opt = document.createElement('option');
      opt.value = group;
      opt.textContent = group;
      if (group === currentGroup) opt.selected = true;
      domElements.filterGroups.appendChild(opt);
    });
    return;
  }
  
  const filteredExercises = exercises.filter(ex => ex.targets.includes(selectedTarget));
  const availableGroups = [...new Set(filteredExercises.flatMap(ex => ex.groups))].sort();
  
  availableGroups.forEach(group => {
    const opt = document.createElement('option');
    opt.value = group;
    opt.textContent = group;
    if (group === currentGroup && availableGroups.includes(currentGroup)) {
      opt.selected = true;
    }
    domElements.filterGroups.appendChild(opt);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
function createExerciseCard(ex) {
  const card = document.createElement('div');
  card.className = 'exercise-card';
  card.setAttribute('data-id', ex.id);
  
  const safeJoin = (arr) => Array.isArray(arr) && arr.length > 0 ? arr.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  card.innerHTML = `
    <h3>${ex.name_ru}</h3>
    ${ex.gif ? '' : '<div class="image-placeholder">üì∑<br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ<br>–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>'}
    <p><b>–ì—Ä—É–ø–ø—ã:</b> ${safeJoin(ex.groups)}</p>
    <p><b>–¶–µ–ª–∏:</b> ${safeJoin(ex.targets)}</p>
    <button class="btn details-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (ex.gif) {
    const imgContainer = card.querySelector('h3').nextSibling;
    const img = createExerciseImage(ex.gif, ex.name_en);
    card.insertBefore(img, imgContainer);
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
  const detailsBtn = card.querySelector('.details-btn');
  if (detailsBtn) {
    detailsBtn.onclick = () => showDetails(ex);
  }
  
  return card;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
function renderExercises(list) {
  if (!domElements.container) return;
  
  requestAnimationFrame(() => {
    domElements.container.innerHTML = '';
    
    if (!list || list.length === 0) {
      domElements.container.innerHTML = `
        <div class="no-results">
          <p>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          <p class="no-results-hint">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
          <button class="btn reset-filters-btn" onclick="resetFilters()">–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
        </div>
      `;
      return;
    }
    
    const fragment = document.createDocumentFragment();
    const countInfo = document.createElement('div');
    countInfo.className = 'results-count';
    countInfo.textContent = `–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${list.length}`;
    fragment.appendChild(countInfo);
    
    list.forEach(ex => {
      const card = createExerciseCard(ex);
      fragment.appendChild(card);
    });
    
    domElements.container.appendChild(fragment);
  });
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
  if (!exercises.length) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  currentFilters = {
    search: domElements.searchInput ? domElements.searchInput.value.trim().toLowerCase() : '',
    group: domElements.filterGroups ? domElements.filterGroups.value : '',
    target: domElements.filterTargets ? domElements.filterTargets.value : '',
    type: domElements.filterType ? domElements.filterType.value : '',
    equipment: domElements.filterEquipment ? domElements.filterEquipment.value : ''
  };
  
  let filteredExercises = exercises.filter(ex => {
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (currentFilters.search) {
      const searchTerm = currentFilters.search;
      const matchesSearch = 
        (ex.name_ru && ex.name_ru.toLowerCase().includes(searchTerm)) || 
        (ex.name_en && ex.name_en.toLowerCase().includes(searchTerm)) ||
        (ex.groups.some(group => group.toLowerCase().includes(searchTerm))) ||
        (ex.targets.some(target => target.toLowerCase().includes(searchTerm)));
      
      if (!matchesSearch) return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ –º—ã—à—Ü
    if (currentFilters.group && !ex.groups.includes(currentFilters.group)) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω–µ
    if (currentFilters.target && !ex.targets.includes(currentFilters.target)) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if (currentFilters.type && ex.type !== currentFilters.type) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
    if (currentFilters.equipment && !ex.equipment.includes(currentFilters.equipment)) {
      return false;
    }
    
    return true;
  });
  
  renderExercises(filteredExercises);
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function showDetails(ex) {
  if (!domElements.modalContent || !domElements.modalBack) return;
  
  const safeJoin = (arr) => Array.isArray(arr) && arr.length > 0 ? arr.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  domElements.modalContent.innerHTML = `
    <div class="modal-header">
      <h2>${ex.name_ru}</h2>
      ${ex.name_en && ex.name_en !== ex.name_ru ? `<p class="exercise-name-en">${ex.name_en}</p>` : ''}
    </div>
    
    <div class="modal-body">
      ${ex.gif ? createExerciseImage(ex.gif, ex.name_en, 'modal-gif').outerHTML : '<div class="image-placeholder large">üì∑<br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ<br>–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>'}
      
      <div class="exercise-details">
        <div class="detail-item">
          <strong>–ì—Ä—É–ø–ø—ã –º—ã—à—Ü:</strong>
          <span>${safeJoin(ex.groups)}</span>
        </div>
        <div class="detail-item">
          <strong>–¶–µ–ª–µ–≤—ã–µ –∑–æ–Ω—ã:</strong>
          <span>${safeJoin(ex.targets)}</span>
        </div>
        <div class="detail-item">
          <strong>–¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</strong>
          <span>${ex.type}</span>
        </div>
        <div class="detail-item">
          <strong>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</strong>
          <span>${safeJoin(ex.equipment)}</span>
        </div>
        ${ex.id ? `<div class="detail-item">
          <strong>ID:</strong>
          <span>${ex.id}</span>
        </div>` : ''}
      </div>
    </div>
  `;
  
  domElements.modalBack.style.display = 'flex';
  document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function resetFilters() {
  if (domElements.searchInput) domElements.searchInput.value = '';
  if (domElements.filterGroups) domElements.filterGroups.value = '';
  if (domElements.filterTargets) domElements.filterTargets.value = '';
  if (domElements.filterType) domElements.filterType.value = '';
  if (domElements.filterEquipment) domElements.filterEquipment.value = '';
  
  currentFilters = {
    search: '',
    group: '',
    target: '',
    type: '',
    equipment: ''
  };
  
  applyFilters();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function addResetFiltersButton() {
  const filtersSection = document.querySelector('.filters');
  if (!filtersSection) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
  if (filtersSection.querySelector('.reset-filters-btn')) return;
  
  const resetBtn = document.createElement('button');
  resetBtn.type = 'button';
  resetBtn.className = 'btn reset-filters-btn';
  resetBtn.textContent = '–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã';
  resetBtn.onclick = resetFilters;
  
  filtersSection.appendChild(resetBtn);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  if (domElements.modalClose) {
    domElements.modalClose.onclick = () => {
      if (domElements.modalBack) {
        domElements.modalBack.style.display = 'none';
        document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
      }
    };
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
  if (domElements.modalBack) {
    domElements.modalBack.onclick = (e) => { 
      if (e.target === domElements.modalBack) {
        domElements.modalBack.style.display = 'none';
        document.body.style.overflow = '';
      }
    };
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && domElements.modalBack && domElements.modalBack.style.display === 'flex') {
      domElements.modalBack.style.display = 'none';
      document.body.style.overflow = '';
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filterElements = [domElements.filterGroups, domElements.filterTargets, domElements.filterType, domElements.filterEquipment];
  filterElements.forEach(filter => {
    if (filter) {
      filter.addEventListener('change', applyFilters);
    }
  });
  
  // –ü–æ–∏—Å–∫ —Å debounce
  if (domElements.searchInput) {
    domElements.searchInput.addEventListener('input', debounce(applyFilters, 300));
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É (–µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    domElements.searchInput.addEventListener('search', applyFilters);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
  setupEventListeners();
  addResetFiltersButton();
  loadExercises();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.resetFilters = resetFilters;
window.showDetails = showDetails;
// ---- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX ----

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ localStorage
function saveFilterState() {
  try {
    localStorage.setItem('exerciseFilters', JSON.stringify(currentFilters));
    localStorage.setItem('exerciseFiltersTimestamp', Date.now().toString());
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', e);
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ localStorage
function restoreFilterState() {
  try {
    const savedFilters = localStorage.getItem('exerciseFilters');
    const timestamp = localStorage.getItem('exerciseFiltersTimestamp');
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ 1 —á–∞—Å
    if (timestamp && Date.now() - parseInt(timestamp) > 3600000) {
      localStorage.removeItem('exerciseFilters');
      localStorage.removeItem('exerciseFiltersTimestamp');
      return;
    }
    
    if (savedFilters) {
      const filters = JSON.parse(savedFilters);
      currentFilters = filters;
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö
      if (domElements.searchInput && filters.search) {
        domElements.searchInput.value = filters.search;
      }
      if (domElements.filterGroups && filters.group) {
        domElements.filterGroups.value = filters.group;
        updateTargetsFilter(filters.group);
      }
      if (domElements.filterTargets && filters.target) {
        domElements.filterTargets.value = filters.target;
        updateGroupsFilter(filters.target);
      }
      if (domElements.filterType && filters.type) {
        domElements.filterType.value = filters.type;
      }
      if (domElements.filterEquipment && filters.equipment) {
        domElements.filterEquipment.value = filters.equipment;
      }
    }
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', e);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º applyFilters –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const originalApplyFilters = applyFilters;
applyFilters = function() {
  originalApplyFilters();
  saveFilterState();
};

// –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
function addQuickFilters() {
  const quickFiltersContainer = document.createElement('div');
  quickFiltersContainer.className = 'quick-filters';
  
  const popularGroups = ['–ì—Ä—É–¥—å', '–°–ø–∏–Ω–∞', '–ü–ª–µ—á–∏', '–ù–æ–≥–∏', '–ü—Ä–µ—Å—Å', '–†—É–∫–∏'];
  
  quickFiltersContainer.innerHTML = `
    <div class="quick-filters-header">
      <span>–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:</span>
    </div>
    <div class="quick-filters-buttons">
      ${popularGroups.map(group => `
        <button type="button" class="btn quick-filter-btn" data-group="${group}">
          ${group}
        </button>
      `).join('')}
      <button type="button" class="btn quick-filter-btn" data-action="favorites">
        ‚òÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
      </button>
    </div>
  `;
  
  const content = document.querySelector('.content');
  const filtersSection = content.querySelector('.filters');
  content.insertBefore(quickFiltersContainer, filtersSection.nextSibling);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  quickFiltersContainer.addEventListener('click', (e) => {
    const btn = e.target.closest('.quick-filter-btn');
    if (!btn) return;
    
    if (btn.dataset.group) {
      // –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ –º—ã—à—Ü
      if (domElements.filterGroups) {
        domElements.filterGroups.value = btn.dataset.group;
        updateTargetsFilter(btn.dataset.group);
        applyFilters();
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        domElements.container.scrollIntoView({ behavior: 'smooth' });
      }
    } else if (btn.dataset.action === 'favorites') {
      showFavorites();
    }
  });
}

// –°–∏—Å—Ç–µ–º–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
function setupFavoritesSystem() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  if (!localStorage.getItem('favoriteExercises')) {
    localStorage.setItem('favoriteExercises', JSON.stringify([]));
  }
}

function getFavorites() {
  try {
    return JSON.parse(localStorage.getItem('favoriteExercises')) || [];
  } catch (e) {
    return [];
  }
}

function toggleFavorite(exerciseId) {
  const favorites = getFavorites();
  const index = favorites.indexOf(exerciseId);
  
  if (index > -1) {
    favorites.splice(index, 1);
  } else {
    favorites.push(exerciseId);
  }
  
  localStorage.setItem('favoriteExercises', JSON.stringify(favorites));
  updateFavoriteButtons();
  return index === -1; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
}

function updateFavoriteButtons() {
  const favorites = getFavorites();
  const favoriteBtns = document.querySelectorAll('.favorite-btn');
  
  favoriteBtns.forEach(btn => {
    const exerciseId = parseInt(btn.dataset.exerciseId);
    if (favorites.includes(exerciseId)) {
      btn.classList.add('favorited');
      btn.innerHTML = '‚òÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
    } else {
      btn.classList.remove('favorited');
      btn.innerHTML = '‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    }
  });
}

function showFavorites() {
  const favorites = getFavorites();
  const favoriteExercises = exercises.filter(ex => favorites.includes(ex.id));
  
  if (favoriteExercises.length === 0) {
    renderExercises([]);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    if (domElements.container) {
      domElements.container.innerHTML = `
        <div class="no-results">
          <p>–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</p>
          <p class="no-results-hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫—É –≤ –∫–∞—Ä—Ç–æ—á–∫–µ</p>
          <button class="btn reset-filters-btn" onclick="resetFilters()">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</button>
        </div>
      `;
    }
  } else {
    renderExercises(favoriteExercises);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º createExerciseCard –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
const originalCreateExerciseCard = createExerciseCard;
createExerciseCard = function(ex) {
  const card = originalCreateExerciseCard(ex);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const detailsBtn = card.querySelector('.details-btn');
  const favoriteBtn = document.createElement('button');
  favoriteBtn.className = 'btn favorite-btn';
  favoriteBtn.dataset.exerciseId = ex.id;
  favoriteBtn.innerHTML = '‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
  
  favoriteBtn.onclick = (e) => {
    e.stopPropagation();
    const added = toggleFavorite(ex.id);
    
    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±—ç–∫
    if (added) {
      favoriteBtn.style.transform = 'scale(1.1)';
      setTimeout(() => {
        favoriteBtn.style.transform = 'scale(1)';
      }, 200);
    }
  };
  
  detailsBtn.parentNode.insertBefore(favoriteBtn, detailsBtn);
  
  return card;
};

// –û–±–Ω–æ–≤–ª—è–µ–º showDetails –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –º–æ–¥–∞–ª–∫—É
const originalShowDetails = showDetails;
showDetails = function(ex) {
  originalShowDetails(ex);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modalBody = domElements.modalContent.querySelector('.modal-body');
  const favoriteBtn = document.createElement('button');
  favoriteBtn.className = 'btn favorite-btn large';
  favoriteBtn.dataset.exerciseId = ex.id;
  favoriteBtn.innerHTML = '‚òÜ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
  
  favoriteBtn.onclick = () => {
    const added = toggleFavorite(ex.id);
    if (added) {
      favoriteBtn.innerHTML = '‚òÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
    }
  };
  
  modalBody.appendChild(favoriteBtn);
  updateFavoriteButtons();
};

// –ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
function setupSearchAutocomplete() {
  if (!domElements.searchInput) return;
  
  const autocompleteList = document.createElement('div');
  autocompleteList.className = 'autocomplete-list';
  domElements.searchInput.parentNode.appendChild(autocompleteList);
  
  domElements.searchInput.addEventListener('input', function() {
    const value = this.value.trim().toLowerCase();
    autocompleteList.innerHTML = '';
    
    if (value.length < 2) {
      autocompleteList.style.display = 'none';
      return;
    }
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö –º—ã—à—Ü
    const suggestions = [];
    
    exercises.forEach(ex => {
      if (ex.name_ru.toLowerCase().includes(value)) {
        suggestions.push({
          text: ex.name_ru,
          type: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
          group: ex.groups[0]
        });
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    const uniqueGroups = [...new Set(exercises.flatMap(ex => ex.groups))];
    uniqueGroups.forEach(group => {
      if (group.toLowerCase().includes(value)) {
        suggestions.push({
          text: group,
          type: '–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü'
        });
      }
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ suggestions
    const limitedSuggestions = suggestions.slice(0, 8);
    
    if (limitedSuggestions.length > 0) {
      limitedSuggestions.forEach(suggestion => {
        const item = document.createElement('div');
        item.className = 'autocomplete-item';
        item.innerHTML = `
          <strong>${suggestion.text}</strong>
          <span class="autocomplete-type">${suggestion.type}</span>
          ${suggestion.group ? `<span class="autocomplete-group">${suggestion.group}</span>` : ''}
        `;
        
        item.onclick = () => {
          domElements.searchInput.value = suggestion.text;
          autocompleteList.style.display = 'none';
          applyFilters();
        };
        
        autocompleteList.appendChild(item);
      });
      
      autocompleteList.style.display = 'block';
    } else {
      autocompleteList.style.display = 'none';
    }
  });
  
  // –°–∫—Ä—ã–≤–∞–µ–º autocomplete –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
  document.addEventListener('click', (e) => {
    if (!domElements.searchInput.contains(e.target) && !autocompleteList.contains(e.target)) {
      autocompleteList.style.display = 'none';
    }
  });
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∞–Ω–æ–Ω–∏–º–Ω–∞—è)
function trackExerciseView(exerciseId) {
  try {
    const stats = JSON.parse(localStorage.getItem('exerciseStats')) || {};
    stats[exerciseId] = (stats[exerciseId] || 0) + 1;
    localStorage.setItem('exerciseStats', JSON.stringify(stats));
  } catch (e) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', e);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º showDetails –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
const originalShowDetailsWithTracking = showDetails;
showDetails = function(ex) {
  originalShowDetailsWithTracking(ex);
  trackExerciseView(ex.id);
};

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function addSorting() {
  const filtersSection = document.querySelector('.filters');
  if (!filtersSection) return;
  
  const sortSelect = document.createElement('select');
  sortSelect.className = 'sort-select';
  sortSelect.innerHTML = `
    <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)</option>
    <option value="name-desc">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)</option>
    <option value="popular">–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</option>
    <option value="group">–ü–æ –≥—Ä—É–ø–ø–µ –º—ã—à—Ü</option>
  `;
  
  sortSelect.addEventListener('change', function() {
    sortExercises(this.value);
  });
  
  filtersSection.appendChild(sortSelect);
}

function sortExercises(sortBy) {
  let sortedExercises = [...exercises];
  
  switch (sortBy) {
    case 'name':
      sortedExercises.sort((a, b) => a.name_ru.localeCompare(b.name_ru));
      break;
    case 'name-desc':
      sortedExercises.sort((a, b) => b.name_ru.localeCompare(a.name_ru));
      break;
    case 'group':
      sortedExercises.sort((a, b) => {
        const groupA = a.groups[0] || '';
        const groupB = b.groups[0] || '';
        return groupA.localeCompare(groupB) || a.name_ru.localeCompare(b.name_ru);
      });
      break;
    case 'popular':
      try {
        const stats = JSON.parse(localStorage.getItem('exerciseStats')) || {};
        sortedExercises.sort((a, b) => {
          const viewsA = stats[a.id] || 0;
          const viewsB = stats[b.id] || 0;
          return viewsB - viewsA;
        });
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:', e);
      }
      break;
  }
  
  renderExercises(sortedExercises);
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function preloadImages() {
  if (!exercises.length) return;
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imagesToPreload = exercises.slice(0, 10).filter(ex => ex.gif);
  
  imagesToPreload.forEach(ex => {
    const img = new Image();
    img.src = ex.gif;
  });
}

// Lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function setupLazyLoading() {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        img.removeAttribute('data-src');
        observer.unobserve(img);
      }
    });
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º createExerciseImage –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ lazy loading
  const originalCreateExerciseImage = createExerciseImage;
  window.createExerciseImage = function(gifSrc, altText, className = 'exercise-gif') {
    const img = originalCreateExerciseImage(gifSrc, altText, className);
    img.dataset.src = gifSrc;
    img.src = ''; // –û—á–∏—â–∞–µ–º src
    
    observer.observe(img);
    return img;
  };
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
document.addEventListener('DOMContentLoaded', function() {
  setupEventListeners();
  addResetFiltersButton();
  addQuickFilters();
  addSorting();
  setupFavoritesSystem();
  setupSearchAutocomplete();
  restoreFilterState();
  setupLazyLoading();
  
  loadExercises().then(() => {
    preloadImages();
    updateFavoriteButtons();
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.showFavorites = showFavorites;
window.toggleFavorite = toggleFavorite;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
const originalCreateExerciseImage = createExerciseImage;
window.createExerciseImage = function(gifSrc, altText, className = 'exercise-gif') {
  const img = originalCreateExerciseImage(gifSrc, altText, className);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (className === 'modal-gif') {
    img.onerror = function() {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${gifSrc}`);
      const placeholder = this.parentNode.querySelector('.image-placeholder');
      if (!placeholder) {
        const newPlaceholder = document.createElement('div');
        newPlaceholder.className = 'image-placeholder large';
        newPlaceholder.innerHTML = 'üì∑<br>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ<br>–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        this.parentNode.insertBefore(newPlaceholder, this);
      }
      this.style.display = 'none';
    };
  }
  
  return img;
};

console.log('Exercise module loaded with enhanced features');